export default class SharedData {
    _storage;
    constructor(storage, initialControl = {}) {
        if (!storage) {
            throw new Error('Storage is required for SharedData');
        }
        // Backward compatibility sharedData
        this._storage = storage;
        this._storage.sharedEntities = this._storage.sharedEntities || {};
        this._storage.sharedApplication = this._storage.sharedApplication || {
            nodeDependencies: {},
        };
        this._storage.sharedSource = this._storage.sharedSource || {};
        this._storage.sharedData = this._storage.sharedData || initialControl;
    }
    getSource() {
        return this._storage.sharedSource;
    }
    getControl() {
        return this._storage.sharedData;
    }
    getApplication() {
        if (!this._storage.sharedApplication)
            throw new Error('Shared application not loaded');
        return this._storage.sharedApplication;
    }
    setEntity(entityName, entity) {
        this._storage.sharedEntities[entityName] = entity;
    }
    hasEntity(entityName) {
        return Boolean(this._storage.sharedEntities[entityName]);
    }
    getEntity(entityName) {
        const entity = this._storage.sharedEntities[entityName];
        if (!entity) {
            throw new Error(`Entity definition not loaded for ${entityName}`);
        }
        return entity;
    }
    getEntities(entityNames = Object.keys(this._storage.sharedEntities)) {
        return entityNames.map(entityName => ({ entityName, entity: this.getEntity(entityName) }));
    }
    getEntitiesMap() {
        return this._storage.sharedEntities;
    }
}
