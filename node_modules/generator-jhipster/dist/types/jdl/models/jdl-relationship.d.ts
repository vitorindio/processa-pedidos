export declare const JDL_RELATIONSHIP_ONE_TO_ONE = "OneToOne";
export declare const JDL_RELATIONSHIP_ONE_TO_MANY = "OneToMany";
export declare const JDL_RELATIONSHIP_MANY_TO_ONE = "ManyToOne";
export declare const JDL_RELATIONSHIP_MANY_TO_MANY = "ManyToMany";
export type JDLRelationshipSide = 'left' | 'right';
export type JDLRelationshipType = typeof JDL_RELATIONSHIP_ONE_TO_ONE | typeof JDL_RELATIONSHIP_ONE_TO_MANY | typeof JDL_RELATIONSHIP_MANY_TO_ONE | typeof JDL_RELATIONSHIP_MANY_TO_MANY;
export type JDLRelationshipOptions = Record<'global' | 'source' | 'destination', Record<string, any>>;
export type JDLRelationshipModel = {
    side: JDLRelationshipSide | undefined;
    from: string;
    to: string;
    type: JDLRelationshipType;
    options: JDLRelationshipOptions;
    injectedFieldInFrom: null | string;
    injectedFieldInTo: null | string;
    isInjectedFieldInFromRequired: boolean;
    isInjectedFieldInToRequired: boolean;
    commentInFrom: null | string;
    commentInTo: null | string;
};
export default class JDLRelationship implements JDLRelationshipModel {
    side: JDLRelationshipSide | undefined;
    from: string;
    to: string;
    type: JDLRelationshipType;
    options: {
        global: Record<string, any>;
        source: Record<string, any>;
        destination: Record<string, any>;
    };
    injectedFieldInFrom: null | string;
    injectedFieldInTo: null | string;
    isInjectedFieldInFromRequired: boolean;
    isInjectedFieldInToRequired: boolean;
    commentInFrom: null | string;
    commentInTo: null | string;
    constructor(args: Partial<JDLRelationshipModel> & Pick<JDLRelationshipModel, 'from' | 'to' | 'type'>);
    /**
     * Returns a constructed ID representing this relationship.
     * @return {String} the relationship's id.
     */
    getId(): string;
    hasGlobalOption(option: string): boolean;
    forEachGlobalOption(passedFunction: (optionName: string, value: any) => void): void;
    forEachSourceOption(passedFunction: (optionName: string, value: any) => void): void;
    forEachDestinationOption(passedFunction: (optionName: string, value: any) => void): void;
    toString(): string;
}
