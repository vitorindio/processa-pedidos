import { Entity } from '../types/index.mjs';
export declare const entityDefaultConfig: {
    pagination: string;
    anyPropertyHasValidation: boolean;
    dto: string;
    service: string;
    jpaMetamodelFiltering: boolean;
    readOnly: boolean;
    embedded: boolean;
    entityAngularJSSuffix: string;
    fluentMethods: boolean;
    clientRootFolder: string;
    readonly fields: never[];
    readonly relationships: never[];
};
export default function prepareEntity(entityWithConfig: any, generator: any, application: any): any;
export declare function derivedPrimaryKeyProperties(primaryKey: any): void;
export declare function prepareEntityPrimaryKeyForTemplates(entityWithConfig: any, generator: any, enableCompositeId?: boolean): any;
/**
 * Copy required application config into entity.
 * Some entity features are related to the backend instead of the current app.
 * This allows to entities files based on the backend features.
 *
 * @param {Object} entity - entity to copy the config into.
 * @param {Object} config - config object.
 * @returns {Object} the entity parameter for chaining.
 */
export declare function loadRequiredConfigIntoEntity(entity: any, config: any): any;
export declare function preparePostEntityCommonDerivedProperties(entity: Entity): void;
export declare function preparePostEntitiesCommonDerivedProperties(entities: any): void;
export declare function addFakerToEntity(entityWithConfig: any, nativeLanguage?: string): Promise<void>;
