import type { Storage } from 'yeoman-generator';
import BaseGenerator from '../base/index.mjs';
import type { BaseApplicationGeneratorDefinition, GenericApplicationDefinition } from './tasks.mjs';
import { GenericTaskGroup, GenericSourceTypeDefinition } from '../base/tasks.mjs';
import type { BaseApplication } from './types.mjs';
import { SpringBootSourceType } from '../server/types.mjs';
import type { CommonClientServerApplication } from './types.mjs';
export type BaseApplicationSource = Record<string, (...args: any[]) => any> & SpringBootSourceType;
export type JHipsterApplication = BaseApplication & Partial<CommonClientServerApplication>;
export type GeneratorDefinition = BaseApplicationGeneratorDefinition<GenericApplicationDefinition<JHipsterApplication> & GenericSourceTypeDefinition<BaseApplicationSource>>;
/**
 * This is the base class for a generator that generates entities.
 */
export default class BaseApplicationGenerator<Definition extends BaseApplicationGeneratorDefinition<{
    applicationType: any;
    entityType: any;
    sourceType: any;
}> = GeneratorDefinition> extends BaseGenerator<Definition> {
    static CONFIGURING_EACH_ENTITY: string;
    static LOADING_ENTITIES: string;
    static PREPARING_EACH_ENTITY: string;
    static PREPARING_EACH_ENTITY_FIELD: string;
    static PREPARING_EACH_ENTITY_RELATIONSHIP: string;
    static POST_PREPARING_EACH_ENTITY: string;
    static WRITING_ENTITIES: string;
    static POST_WRITING_ENTITIES: string;
    constructor(args: any, options: any, features: any);
    /**
     * Get Entity configuration path
     * @param entityName Entity name
     * @returns
     */
    getEntityConfigPath(entityName: string): string;
    /**
     * Get all the generator configuration from the .yo-rc.json file
     * @param entityName - Name of the entity to load.
     * @param create - Create storage if doesn't exists.
     */
    getEntityConfig(entityName: string, create?: boolean): Storage | undefined;
    /**
     * get sorted list of entitiy names according to changelog date (i.e. the order in which they were added)
     */
    getExistingEntityNames(): string[];
    /**
     * get sorted list of entities according to changelog date (i.e. the order in which they were added)
     */
    getExistingEntities(): {
        name: string;
        definition: Record<string, any>;
    }[];
    /**
     * Priority API stub for blueprints.
     *
     * Configuring each entity should configure entities.
     */
    get configuringEachEntity(): GenericTaskGroup<this, Definition['configuringEachEntityTaskParam']>;
    get preparingEachEntity(): GenericTaskGroup<this, Definition['preparingEachEntityTaskParam']>;
    /**
     * Priority API stub for blueprints.
     */
    get preparingEachEntityField(): GenericTaskGroup<this, Definition['preparingEachEntityFieldTaskParam']>;
    /**
     * Priority API stub for blueprints.
     */
    get preparingEachEntityRelationship(): GenericTaskGroup<this, Definition['preparingEachEntityRelationshipTaskParam']>;
    /**
     * Priority API stub for blueprints.
     */
    get postPreparingEachEntity(): GenericTaskGroup<this, Definition['postPreparingEachEntityTaskParam']>;
    /**
     * Priority API stub for blueprints.
     */
    get writingEntities(): GenericTaskGroup<this, Definition['writingEntitiesTaskParam']>;
    /**
     * Priority API stub for blueprints.
     */
    get postWritingEntities(): GenericTaskGroup<this, Definition['postWritingEntitiesTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asConfiguringEachEntityTaskGroup(taskGroup: GenericTaskGroup<this, Definition['configuringEachEntityTaskParam']>): GenericTaskGroup<this, Definition['configuringEachEntityTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asLoadingEntitiesTaskGroup(taskGroup: GenericTaskGroup<this, Definition['loadingEntitiesTaskParam']>): GenericTaskGroup<this, Definition['loadingEntitiesTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPreparingEachEntityTaskGroup(taskGroup: GenericTaskGroup<this, Definition['preparingEachEntityTaskParam']>): GenericTaskGroup<this, Definition['preparingEachEntityTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPreparingEachEntityFieldTaskGroup(taskGroup: GenericTaskGroup<this, Definition['preparingEachEntityFieldTaskParam']>): GenericTaskGroup<this, Definition['preparingEachEntityFieldTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPreparingEachEntityRelationshipTaskGroup(taskGroup: GenericTaskGroup<this, Definition['preparingEachEntityRelationshipTaskParam']>): GenericTaskGroup<this, Definition['preparingEachEntityRelationshipTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPostPreparingEachEntityTaskGroup(taskGroup: GenericTaskGroup<this, Definition['postPreparingEachEntityTaskParam']>): GenericTaskGroup<this, Definition['postPreparingEachEntityTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asWritingEntitiesTaskGroup(taskGroup: GenericTaskGroup<this, Definition['writingEntitiesTaskParam']>): GenericTaskGroup<this, Definition['writingEntitiesTaskParam']>;
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPostWritingEntitiesTaskGroup(taskGroup: GenericTaskGroup<this, Definition['postWritingEntitiesTaskParam']>): GenericTaskGroup<this, Definition['postWritingEntitiesTaskParam']>;
    /**
     * Reset entities fake data seed.
     * @param {string} seed
     */
    resetEntitiesFakeData(seed: any): void;
    getArgsForPriority(priorityName: any): any;
    /**
     * @private
     */
    getTaskFirstArgForPriority(priorityName: any): any;
    /**
     * @private
     * Get entities to configure.
     * This method doesn't filter entities. An filtered config can be changed at thie priority.
     * @returns {string[]}
     */
    getEntitiesDataToConfigure(): {
        entityName: string;
        entityStorage: Storage | undefined;
        entityConfig: import("yeoman-generator").StorageRecord;
    }[];
    /**
     * @private
     * Get entities to load.
     * This method doesn't filter entities. An filtered config can be changed at thie priority.
     * @returns {string[]}
     */
    getEntitiesDataToLoad(): {
        entityName: string;
        entityStorage: Storage | undefined;
    }[];
    /**
     * @private
     * Get entities to prepare.
     * @returns {object[]}
     */
    getEntitiesDataToPrepare(): {
        entity: any;
        description: string;
        entityName: string;
    }[];
    /**
     * @private
     * Get entities and fields to prepare.
     * @returns {object[]}
     */
    getEntitiesFieldsDataToPrepare(): any[];
    /**
     * @private
     * Get entities and relationships to prepare.
     * @returns {object[]}
     */
    getEntitiesRelationshipsDataToPrepare(): any[];
    /**
     * @private
     * Get entities to post prepare.
     * @returns {object[]}
     */
    getEntitiesDataToPostPrepare(): {
        entity: any;
        description: string;
        entityName: string;
    }[];
    /**
     * @private
     * Get entities to write.
     * @returns {object[]}
     */
    getEntitiesDataForPriorities(): {
        entities: any[];
    };
    /**
     * @private
     * Get entities to write.
     * @returns {object[]}
     */
    getEntitiesDataToWrite(): {
        entities: any[];
    };
    /**
     * @private
     * Queue entity tasks.
     */
    queueEntityTasks(): void;
}
