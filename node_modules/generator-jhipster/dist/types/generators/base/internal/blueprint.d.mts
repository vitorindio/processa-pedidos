/**
 * @private
 * Loads the blueprint information from the configuration of the specified generator.
 * @param config - the generator's configuration object.
 * @returns {Array} an array that contains the info for each blueprint
 */
export function loadBlueprintsFromConfiguration(config: any): any[];
/**
 * @private
 * Splits and normalizes a comma separated list of blueprint names with optional versions.
 * @param {string|any[]} [blueprints] - comma separated list of blueprint names, e.g kotlin,vuewjs@1.0.1. If an array then
 * no processing is performed and it is returned as is.
 * @returns {Array} an array that contains the info for each blueprint
 */
export function parseBluePrints(blueprints?: string | any[] | undefined): any[];
/**
 * @private
 * Merges blueprint arrays, keeping order and version priority.
 * @param {...Blueprint[]} [blueprintsToMerge] - Blueprint arrays to be merged.
 * @returns {Blueprint[]} an array that contains the info for each blueprint
 */
export function mergeBlueprints(...blueprintsToMerge?: Blueprint[][] | undefined): Blueprint[];
/**
 * @private
 * Remove duplicate blueprints, keeping order and version priority.
 * @param {Blueprint[]} blueprints - Blueprint arrays to be merged.
 * @returns {Blueprint[]} an array that contains the info for each blueprint
 */
export function removeBlueprintDuplicates(blueprints: Blueprint[]): Blueprint[];
/**
 * @private
 * Normalize blueprint name if needed and also extracts version if defined. If no version is defined then `latest`
 * is used by default.
 * @param {string} blueprint - name of the blueprint and optionally a version, e.g kotlin[@0.8.1]
 * @returns {object} containing the name and version of the blueprint
 */
export function parseBlueprintInfo(blueprint: string): object;
/**
 * @private
 * Normalize blueprint name: prepend 'generator-jhipster-' if needed
 * @param {string} blueprint - name of the blueprint
 * @returns {string} the normalized blueprint name
 */
export function normalizeBlueprintName(blueprint: string): string;
