/// <reference types="node" resolution-mode="require"/>
import { type Storage } from 'yeoman-generator';
import JHipsterBaseCoreGenerator from '../base-core/index.mjs';
/**
 * Class the contains the methods that should be refactored and converted to typescript.
 */
export default abstract class JHipsterBaseGenerator extends JHipsterBaseCoreGenerator {
    /**
     * @private
     * Add a new element in the "global.json" translations.
     *
     * @param {string} key - Key for the menu entry
     * @param {string} value - Default translated value
     * @param {string} language - The language to which this translation should be added
     */
    addElementTranslationKey(key: any, value: any, language: any, webappSrcDir?: string): void;
    /**
     * @private
     * Add a new element in the admin section of "global.json" translations.
     *
     * @param {string} key - Key for the menu entry
     * @param {string} value - Default translated value
     * @param {string} language - The language to which this translation should be added
     */
    addAdminElementTranslationKey(key: any, value: any, language: any, webappSrcDir?: string): void;
    /**
     * @private
     * Add a new entity in the "global.json" translations.
     *
     * @param {string} key - Key for the entity name
     * @param {string} value - Default translated value
     * @param {string} language - The language to which this translation should be added
     */
    addEntityTranslationKey(key: any, value: any, language: any, webappSrcDir?: string): void;
    /**
     * @private
     * Copy third-party library resources path.
     *
     * @param {string} sourceFolder - third-party library resources source path
     * @param {string} targetFolder - third-party library resources destination path
     */
    copyExternalAssetsInWebpack(sourceFolder: any, targetFolder: any): void;
    /**
     * Add webpack config.
     *
     * @param {string} config - webpack config to be merged
     */
    addWebpackConfig(config: any, clientFramework: any): void;
    /**
     * Generate a date to be used by Liquibase changelogs.
     *
     * @param {Boolean} [reproducible=true] - Set true if the changelog date can be reproducible.
     *                                 Set false to create a changelog date incrementing the last one.
     * @return {String} Changelog date.
     */
    dateFormatForLiquibase(reproducible?: any): string;
    /**
     * @private
     * Rewrite the specified file with provided content at the needle location
     *
     * @param {string} filePath - path of the source file to rewrite
     * @param {string} needle - needle to look for where content will be inserted
     * @param {string} content - content to be written
     * @returns {boolean} true if the body has changed.
     */
    rewriteFile(filePath: any, needle: any, content: any): void;
    /**
     * @private
     * Get a name suitable for microservice
     * @param {string} microserviceName
     */
    getMicroserviceAppName(microserviceName: any): string;
    /**
     * @private
     * get a table column name in JHipster preferred style.
     *
     * @param {string} value - table column name string
     */
    getColumnName(value: any): string;
    /**
     * @private
     * get a constraint name for tables in JHipster preferred style
     *
     * @param {string} entityName - name of the entity
     * @param {string} columnOrRelationName - name of the column or related entity
     * @param {string} prodDatabaseType - database type
     * @param {boolean} noSnakeCase - do not convert names to snakecase
     * @param {string} prefix - constraintName prefix for the constraintName
     * @param {string} suffix - constraintName suffix for the constraintName
     */
    getConstraintName(entityName: any, columnOrRelationName: any, prodDatabaseType: any, noSnakeCase: any, prefix?: string, suffix?: string): string;
    /**
     * @private
     * get a foreign key constraint name for tables in JHipster preferred style.
     *
     * @param {string} entityName - name of the entity
     * @param {string} relationshipName - name of the related entity
     * @param {string} prodDatabaseType - database type
     * @param {boolean} noSnakeCase - do not convert names to snakecase
     */
    getFKConstraintName(entityName: any, relationshipName: any, prodDatabaseType: any, noSnakeCase: any): string;
    /**
     * @private
     * get a unique constraint name for tables in JHipster preferred style.
     *
     * @param {string} entityName - name of the entity
     * @param {string} columnName - name of the column
     * @param {string} prodDatabaseType - database type
     * @param {boolean} noSnakeCase - do not convert names to snakecase
     */
    getUXConstraintName(entityName: any, columnName: any, prodDatabaseType: any, noSnakeCase: any): string;
    /**
     * Print an error message.
     *
     * @param {string} msg - message to print
     */
    error(msg: any): void;
    /**
     * Print a success message.
     *
     * @param {string} msg - message to print
     */
    success(msg: any): void;
    /**
     * @private
     * get the frontend application name.
     * @param {string} baseName of application - (defaults to <code>this.jhipsterConfig.baseName</code>)
     */
    getFrontendAppName(baseName?: any): string;
    /**
     * get the an upperFirst camelCase value.
     * @param {string} value string to convert
     */
    upperFirstCamelCase(value: any): string;
    /**
     * @private
     * get the java main class name.
     * @param {string} baseName of application
     */
    getMainClassName(baseName?: any): string;
    /**
     * build a generated application.
     *
     * @param {String} buildTool - maven | gradle
     * @param {String} profile - dev | prod
     * @param {Boolean} buildWar - build a war instead of a jar
     * @param {Function} cb - callback when build is complete
     * @returns {object} the command line and its result
     */
    buildApplication(buildTool: any, profile: any, buildWar: any, cb: any): {
        stdout: import("stream").Readable | null;
        buildCmd: string;
    };
    /**
     * @private
     * run a command using the configured Java build tool.
     *
     * @param {String} buildTool - maven | gradle
     * @param {String} profile - dev | prod
     * @param {String} command - the command (goal/task) to run
     * @param {Function} cb - callback when build is complete
     * @returns {object} the command line and its result
     */
    runJavaBuildCommand(buildTool: any, profile: any, command: any, cb: any): {
        stdout: import("stream").Readable | null;
        buildCmd: string;
    };
    /**
     * write the given files using provided options.
     *
     * @template DataType
     * @param {import('./api.mjs').WriteFileOptions<this, DataType>} options
     * @return {Promise<string[]>}
     */
    internalWriteFiles(options: any): Promise<any[]>;
    /**
     * Parse runtime options.
     * @param {Object} [options] - object to load from.
     * @param {Object} [dest] - object to write to.
     */
    parseCommonRuntimeOptions(options?: any, dest?: Record<string, any>): void;
    /**
     * Load common options to be stored.
     * @param {Object} [options] - options object to be loaded from.
     */
    loadStoredAppOptions(options?: any): void;
    /**
     * Load runtime options into dest.
     * all variables should be set to dest,
     * all variables should be referred from config,
     * @param {any} config - config to load config from
     * @param {any} dest - destination context to use default is context
     */
    loadRuntimeOptions(config?: Record<string, any>, dest?: any): void;
    /**
     * Load app configs into dest.
     * all variables should be set to dest,
     * all variables should be referred from config,
     * @param {any} config - config to load config from
     * @param {any} dest - destination context to use default is context
     */
    loadAppConfig(config?: any, dest?: any): void;
    /**
     * @param {Object} dest - destination context to use default is context
     */
    loadDerivedMicroserviceAppConfig(dest?: any): void;
    /**
     * @param {Object} dest - destination context to use default is context
     */
    loadDerivedAppConfig(dest?: any): void;
    /**
     * Load client configs into dest.
     * all variables should be set to dest,
     * all variables should be referred from config,
     * @param {any} config - config to load config from
     * @param {any} dest - destination context to use default is context
     */
    loadClientConfig(config?: any, dest?: any): void;
    /**
     * @param {Object} dest - destination context to use default is context
     */
    loadDerivedClientConfig(dest?: any): void;
    /**
     * Load translation configs into dest.
     * all variables should be set to dest,
     * all variables should be referred from config,
     * @param {any} config - config to load config from
     * @param {any} dest - destination context to use default is context
     */
    loadTranslationConfig(config?: any, dest?: any): void;
    /**
     * Load server configs into dest.
     * all variables should be set to dest,
     * all variables should be referred from config,
     * @param {Object} config - config to load config from
     * @param {import('./bootstrap-application-server/types').SpringBootApplication} dest - destination context to use default is context
     */
    loadServerConfig(config?: any, dest?: any): void;
    loadServerAndPlatformConfig(dest?: any): void;
    /**
     * @param {import('./bootstrap-application-server/types').SpringBootApplication} dest - destination context to use default is context
     */
    loadDerivedServerConfig(dest?: any): void;
    /**
     * @param {Object} config - config to load config from
     * @param {import('./base-application/types.js').PlatformApplication} dest - destination context to use default is context
     */
    loadPlatformConfig(config?: any, dest?: any): void;
    /**
     * @param {import('./bootstrap-application-server/types').SpringBootApplication} dest - destination context to use default is context
     * @param {import('./base-application/types.js').PlatformApplication} dest - destination context to use default is context
     */
    loadDerivedPlatformConfig(dest?: any): void;
    /**
     * @deprecated
     * Get all the generator configuration from the .yo-rc.json file
     * @param {string} yoRcPath - .yo-rc.json folder.
     */
    getJhipsterConfig(yoRcPath: any): Storage;
    /**
     * JHipster config with default values fallback
     */
    get jhipsterConfigWithDefaults(): any;
    setConfigDefaults(defaults?: any): void;
    /**
     * @private
     * Returns the JDBC URL for a databaseType
     *
     * @param {string} databaseType
     * @param {*} options: databaseName, and required infos that depends of databaseType (hostname, localDirectory, ...)
     */
    getJDBCUrl(databaseType: any, options?: {}): string;
    /**
     * @private
     * Returns the R2DBC URL for a databaseType
     *
     * @param {string} databaseType
     * @param {*} options: databaseName, and required infos that depends of databaseType (hostname, localDirectory, ...)
     */
    getR2DBCUrl(databaseType: any, options?: {}): string;
}
