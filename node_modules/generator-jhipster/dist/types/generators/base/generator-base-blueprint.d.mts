import type { ComposeOptions } from 'yeoman-generator';
import JHipsterBaseGenerator from './generator-base-todo.mjs';
import { BaseGeneratorDefinition, GenericTaskGroup } from './tasks.mjs';
import { JHipsterGeneratorFeatures, JHipsterGeneratorOptions } from './api.mjs';
/**
 * Base class that contains blueprints support.
 */
export default class JHipsterBaseBlueprintGenerator<Definition extends BaseGeneratorDefinition = BaseGeneratorDefinition> extends JHipsterBaseGenerator {
    fromBlueprint: boolean;
    sbsBlueprint?: boolean;
    delegateToBlueprint?: boolean;
    blueprintConfig?: Record<string, any>;
    jhipsterContext?: any;
    constructor(args: string | string[], options: JHipsterGeneratorOptions, features: JHipsterGeneratorFeatures);
    /**
     * Filter generator's tasks in case the blueprint should be responsible on queueing those tasks.
     */
    delegateTasksToBlueprint<TaskGroupType>(tasksGetter: () => TaskGroupType): TaskGroupType;
    /**
     * Priority API stub for blueprints.
     *
     * Initializing priority is used to show logo and tasks related to preparing for prompts, like loading constants.
     */
    get initializing(): GenericTaskGroup<this, Definition['initializingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _initializing(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asInitializingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['initializingTaskParam']>): GenericTaskGroup<this, Definition['initializingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Prompting priority is used to prompt users for configuration values.
     */
    get prompting(): GenericTaskGroup<this, Definition['promptingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _prompting(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPromptingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['promptingTaskParam']>): GenericTaskGroup<this, Definition['promptingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Configuring priority is used to customize and validate the configuration.
     */
    get configuring(): GenericTaskGroup<this, Definition['configuringTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _configuring(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asConfiguringTaskGroup(taskGroup: GenericTaskGroup<this, Definition['configuringTaskParam']>): GenericTaskGroup<this, Definition['configuringTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Composing should be used to compose with others generators.
     */
    get composing(): GenericTaskGroup<this, Definition['composingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _composing(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asComposingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['composingTaskParam']>): GenericTaskGroup<this, Definition['composingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Loading should be used to load application configuration from jhipster configuration.
     * Before this priority the configuration should be considered dirty, while each generator configures itself at configuring priority, another generator composed at composing priority can still change it.
     */
    get loading(): GenericTaskGroup<this, Definition['loadingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _loading(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asLoadingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['loadingTaskParam']>): GenericTaskGroup<this, Definition['loadingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Preparing should be used to generate derived properties.
     */
    get preparing(): GenericTaskGroup<this, Definition['preparingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _preparing(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPreparingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['preparingTaskParam']>): GenericTaskGroup<this, Definition['preparingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Default priority should used as misc customizations.
     */
    get default(): GenericTaskGroup<this, Definition['defaultTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _default(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asDefaultTaskGroup(taskGroup: GenericTaskGroup<this, Definition['defaultTaskParam']>): GenericTaskGroup<this, Definition['defaultTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Writing priority should used to write files.
     */
    get writing(): GenericTaskGroup<this, Definition['writingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _writing(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asWritingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['writingTaskParam']>): GenericTaskGroup<this, Definition['writingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * PostWriting priority should used to customize files.
     */
    get postWriting(): GenericTaskGroup<this, Definition['postWritingTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _postWriting(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPostWritingTaskGroup(taskGroup: GenericTaskGroup<this, Definition['postWritingTaskParam']>): GenericTaskGroup<this, Definition['postWritingTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * Install priority should used to prepare the project.
     */
    get install(): GenericTaskGroup<this, Definition['installTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _install(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asInstallTaskGroup(taskGroup: GenericTaskGroup<this, Definition['installTaskParam']>): GenericTaskGroup<this, Definition['installTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * PostWriting priority should used to customize files.
     */
    get postInstall(): GenericTaskGroup<this, Definition['postInstallTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _postInstall(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asPostInstallTaskGroup(taskGroup: GenericTaskGroup<this, Definition['postInstallTaskParam']>): GenericTaskGroup<this, Definition['postInstallTaskParam']>;
    /**
     * Priority API stub for blueprints.
     *
     * End priority should used to say good bye and print instructions.
     */
    get end(): GenericTaskGroup<this, Definition['endTaskParam']>;
    /**
     * @deprecated
     * Public API method used by the getter and also by Blueprints
     */
    _end(): {};
    /**
     * Utility method to get typed objects for autocomplete.
     */
    asEndTaskGroup(taskGroup: GenericTaskGroup<this, Definition['endTaskParam']>): GenericTaskGroup<this, Definition['endTaskParam']>;
    /**
     * @protected
     * Composes with blueprint generators, if any.
     */
    protected composeWithBlueprints(subGen: string, options?: ComposeOptions): Promise<any[]>;
    /**
     * Check if the blueprint implements every priority implemented by the parent generator
     * @param {BaseGenerator} blueprintGenerator
     */
    private checkBlueprintImplementsPriorities;
    /**
     * @private
     * Configure blueprints.
     */
    private _configureBlueprints;
    /**
     * @private
     * Compose external blueprint module
     * @param {string} blueprint - name of the blueprint
     * @param {string} subGen - sub generator
     * @param {any} [extraOptions] - options to pass to blueprint generator
     * @return {Generator|undefined}
     */
    private _composeBlueprint;
    /**
     * @private
     * Try to retrieve the package.json of the blueprint used, as an object.
     * @param {string} blueprintPkgName - generator name
     * @return {object} packageJson - retrieved package.json as an object or undefined if not found
     */
    private _findBlueprintPackageJson;
    /**
     * @private
     * Try to retrieve the version of the blueprint used.
     * @param {string} blueprintPkgName - generator name
     * @return {string} version - retrieved version or empty string if not found
     */
    private _findBlueprintVersion;
    /**
     * @private
     * Check if the generator specified as blueprint is installed.
     * @param {string} blueprint - generator name
     */
    protected _checkBlueprint(blueprint: any): void;
    /**
     * @private
     * Check if the generator specified as blueprint has a version compatible with current JHipster.
     * @param {string} blueprintPkgName - generator name
     */
    protected _checkJHipsterBlueprintVersion(blueprintPkgName: any): void;
}
