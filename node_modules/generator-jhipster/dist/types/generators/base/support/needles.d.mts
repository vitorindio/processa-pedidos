import CoreGenerator from '../../base-core/generator-base.mjs';
import { CascatedEditFileCallback, EditFileCallback } from '../api.mjs';
export type NeedleInsertion = {
    needle: string;
    /**
     * Content to add.
     */
    contentToAdd: string | string[] | ((content: string, options: {
        needleIndent: number;
        indentPrefix: string;
    }) => string);
    contentToCheck?: string | RegExp;
    /**
     * check existing content ignoring white spaces and new lines.
     */
    ignoreWhitespaces?: boolean;
    /**
     * throw error if needle was not found
     */
    optional?: boolean;
    /**
     * Detect and apply ident
     */
    autoIndent?: boolean;
};
type NeedleFileInsertion = NeedleInsertion & {
    /**
     * Path to file.
     * The generator context must be passed.
     */
    filePath?: string;
    /**
     * Common needle prefix
     */
    needlesPrefix?: string;
};
type NeedleContentInsertion = NeedleInsertion & {
    content: string;
};
/**
 * Change spaces sequences and '>' to allow any number of spaces or new line prefix
 */
export declare const convertToPrettierExpressions: (str: string) => string;
/**
 * Check if contentToCheck existing in content
 *
 * @param contentToCheck
 * @param content
 * @param [ignoreWhitespaces=true]
 */
export declare const checkContentIn: (contentToCheck: string | RegExp, content: any, ignoreWhitespaces?: boolean) => boolean;
/**
 * Write content before needle applying identation
 *
 * @param args
 * @returns null if needle was not found, new content otherwise
 */
export declare const insertContentBeforeNeedle: ({ content, contentToAdd, needle, autoIndent }: NeedleContentInsertion) => string | null;
/**
 * Create an callback to insert the new content into existing content.
 *
 * A `contentToAdd` of string type will remove leading `\n`.
 * Leading `\n` allows a prettier template formatting.
 *
 * @param options
 */
export declare const createNeedleCallback: <Generator_1 extends CoreGenerator = CoreGenerator>({ needle, contentToAdd, contentToCheck, optional, ignoreWhitespaces, autoIndent, }: NeedleInsertion) => EditFileCallback<Generator_1>;
/**
 * Inject content before needle or create a needle insertion callback.
 *
 * @param this - generator if provided, editFile will be executed
 */
export declare function createBaseNeedle<Generator extends CoreGenerator = CoreGenerator>(this: Generator | void, options: NeedleFileInsertion | Record<string, string>, needles?: Record<string, string>): EditFileCallback<Generator> | CascatedEditFileCallback<Generator>;
export {};
