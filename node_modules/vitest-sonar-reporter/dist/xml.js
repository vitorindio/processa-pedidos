import { escapeXML } from './xml-escape.js';
const NEWLINE = '\n';
/**
 * Generate XML. Reference:
 *
 * ```xml
 * <testExecutions version="1">
 *   <file path="testx/ClassOneTest.xoo">
 *     <testCase name="test1" duration="5"/>
 *     <testCase name="test2" duration="500">
 *       <skipped message="short message">other</skipped>
 *     </testCase>
 *     <testCase name="test3" duration="100">
 *       <failure message="short">stacktrace</failure>
 *     </testCase>
 *     <testCase name="test4" duration="500">
 *       <error message="short">stacktrace</error>
 *     </testCase>
 *   </file>
 * </testExecutions>
 * ```
 */
export function generateXml(files) {
    return join('<testExecutions version="1">', NEWLINE, files === null || files === void 0 ? void 0 : files.map(generateFileElement).join(NEWLINE), NEWLINE, '</testExecutions>');
}
function generateFileElement(file) {
    return join(indent(1), `<file path="${escapeXML(file.name)}">`, NEWLINE, generateTestCases(file), NEWLINE, indent(1), `</file>`);
}
function generateTestCases(file) {
    const tests = file.tasks.map(getAllTests).flat();
    return tests.map(generateTestCaseElement).join(NEWLINE);
}
function generateTestCaseElement(test) {
    var _a, _b, _c, _d, _e, _f;
    const start = join(indent(2), '<testCase ', `name="${escapeXML(generateTestCaseName(test))}"`, getDurationAttribute(test));
    if (((_a = test.result) === null || _a === void 0 ? void 0 : _a.state) === 'fail') {
        const element = ((_b = test.result.error) === null || _b === void 0 ? void 0 : _b.name) === 'AssertionError' ? 'failure' : 'error';
        return join(start, '>', NEWLINE, indent(3), `<${element} message="${escapeXML((_c = test.result.error) === null || _c === void 0 ? void 0 : _c.message)}">`, NEWLINE, indent(4), `<![CDATA[${escapeXML((_d = test.result.error) === null || _d === void 0 ? void 0 : _d.stack)}]]>`, NEWLINE, indent(3), `</${element}>`, NEWLINE, indent(2), '</testCase>');
    }
    if (test.mode === 'skip' ||
        test.mode === 'todo' ||
        // These might work in future?
        ((_e = test.result) === null || _e === void 0 ? void 0 : _e.state) === 'skip' ||
        ((_f = test.result) === null || _f === void 0 ? void 0 : _f.state) === 'todo') {
        return join(start, '>', NEWLINE, indent(3), `<skipped message="${escapeXML(test.name)}" />`, NEWLINE, indent(2), '</testCase>');
    }
    return join(start, ' />');
}
function getAllTests(task) {
    const tests = [];
    if (task.type === 'custom') {
        return tests;
    }
    if (task.type === 'test') {
        return [...tests, task];
    }
    return [...tests, ...task.tasks.map(getAllTests).flat()];
}
function getDurationAttribute(test) {
    var _a;
    const duration = (_a = test.result) === null || _a === void 0 ? void 0 : _a.duration;
    if (typeof duration !== 'number') {
        return ` duration="0"`;
    }
    return ` duration="${Math.round(duration)}"`;
}
function generateTestCaseName(task) {
    if (task.suite && task.suite.name) {
        return `${generateTestCaseName(task.suite)} - ${task.name}`;
    }
    return task.name;
}
function join(...lines) {
    return lines.filter(Boolean).join('');
}
function indent(level) {
    return '  '.repeat(level);
}
