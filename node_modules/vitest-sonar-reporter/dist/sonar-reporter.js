import { existsSync, mkdirSync, rmSync, writeFileSync } from 'fs';
import { dirname, relative, resolve } from 'path';
import { generateXml } from './xml.js';
/**
 * Reporter used by `vitest`
 */
export default class SonarReporter {
    onInit(ctx) {
        var _a;
        this.ctx = ctx;
        // @ts-expect-error -- untyped
        this.silent = ((_a = ctx.config.sonarReporterOptions) === null || _a === void 0 ? void 0 : _a.silent) === true;
        if (!this.ctx.config.outputFile) {
            throw new Error('SonarReporter requires config.outputFile to be defined in vite config');
        }
        this.outputFile = resolveOutputfile(this.ctx.config);
        if (existsSync(this.outputFile)) {
            rmSync(this.outputFile);
        }
    }
    onFinished(rawFiles) {
        const reportFile = resolve(this.ctx.config.root, this.outputFile);
        // Map filepaths to be relative to root for workspace support
        const files = rawFiles === null || rawFiles === void 0 ? void 0 : rawFiles.map((file) => (Object.assign(Object.assign({}, file), { name: relative(process.cwd(), file.filepath) })));
        const outputDirectory = dirname(reportFile);
        if (!existsSync(outputDirectory)) {
            mkdirSync(outputDirectory, { recursive: true });
        }
        const sorted = files === null || files === void 0 ? void 0 : files.sort(sortByFilename);
        writeFileSync(reportFile, generateXml(sorted), 'utf-8');
        if (!this.silent) {
            this.ctx.logger.log(`SonarQube report written to ${reportFile}`);
        }
    }
}
function resolveOutputfile(config) {
    if (typeof config.outputFile === 'string') {
        return config.outputFile;
    }
    if (config.outputFile['vitest-sonar-reporter']) {
        return config.outputFile['vitest-sonar-reporter'];
    }
    throw new Error([
        'Unable to resolve outputFile for vitest-sonar-reporter.',
        'Define outputFile as string or add entry for it:',
        JSON.stringify({
            test: {
                outputFile: {
                    'vitest-sonar-reporter': 'sonar-report.xml',
                },
            },
        }, null, 2),
    ].join('\n'));
}
function sortByFilename(a, b) {
    if (a.name < b.name)
        return -1;
    if (a.name > b.name)
        return 1;
    return 0;
}
